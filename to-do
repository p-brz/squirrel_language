# Tarefas Gerais:

- Identificar tipos e passar ao longo das  regras  do parser
- Checagem de tipos e outras regras da gram. de atributos

- Implementação do comportamento dinâmico
- Geração de Código

# Próximas Tarefas:

níveis de dificuldade:
   (+)    fácil
   (++)   razoável
   (+++)   médio
   (++++)  dificil
   (?)    desconhecida
   
## Tradução (geração de código) + Checagem de tipos

* Gerar código para enum 
  OK(+) corrigir geração de nomes [joao]
  - (++) gerar função para converter em string
* OK (+++) Gerar construtor de struct [Brunno]
* OK (+) Corrigir regra type_or_expr
* OK (++++) Gerar literal de array
* OK (+) Traduzir nomes de tipo (para que tipos array virem Array) [Paulo]
* OK (?) Gerar expressão para criar array vazio (ver primeira regra em array_literal)
* OK (+) Gerar expressão para criar array de tamanho definido
* OK (++) Gerar expressões de cast
* OK(+) Gerar tradução de index_access [joao]
    - ver exemplo em call_functionobj.c

* Durante declaração de símbolos, checar se não há duplicidade e para:
    OBS.: utilizar função sq_ExistSymbol para testar se símbolo já existe
    OBS.2: implementar checagem dentro das funções declaração de símbolos
  - (+) variáveis e constantes
  - (+) funções
  - (+) tipos (struct, union, function type)
  - (+) namespace
  - ...?
  Obs.: considerar escopo 
* (++) Gerar instrução de atribuição [paulo]
    - aplicar regras de compatibilidade de tipos (coerção)
* (++) Gerar retorno de função
    
* (+) Implementar programas para teste de erros [Paulo]
    - OK (+) Testar variáveis e funções omitidas
    - OK (+) Testar variáveis e funções duplicadas no mesmo escopo 
    - OK (+) Testar acesso para variáveis com mesmo nome em escopos não aninhados
    - OK (+) Testar acesso para variáveis com mesmo nome em escopos aninhados
    - OK (+) Testar tipos incompatíveis em atribuição
    - (+) Testar compatibilidade de parâmetros de função
    - (+) Testar compatibilidade de retorno de função
    - (+) Testar tipos incompatíveis em expressão
    - (+) Testar coerções compatíveis
    - (+) Testar erros de return (tipo e presença/ausência)
* (+) Implementar programas de exemplo
    - (+) Leitura de valores (envolvendo tipos distintos), avaliação de expressões, atribuições e escrita em tela.
    - OK(+) Busca de um elemento k em um vetor contendo n elementos.[joao]
    - (+) Leitura de duas matrizes A e B, cálculo e impressão da matriz C = A * B. 
    - (+) Criação e uso de módulos para cálculo das operações aritméticas (binárias) elementares.
    - OK(+) Fatorial. (recursivo)[joao]
    - OK(+) Fibonacci (recursivo)[joao]
* OK (++) Gerar Expression corretamente a partir de binary_expr
    * OK (+) Em 'compiler_types' gerar função 'OperatorCategory sq_getOperatorCategory(const char * operator)'
    * OK (++) Em 'type_checker' criar função que retorna o tipo da expressão 
            de acordo com o operador e expressões recebidas
            OBS.: assinatura da função:
                type sq_getBinaryExpressionType(const char * operator
                        , Expression * expr1, Expression * expr2):
            - (+) Em 'type_checker' criar função auxiliar que retorna o tipo resultante
                    da expressão de acordo com categoria do operador 
                    e expressões recebidas
                    1. Se categoria for relacional ou lógica, tipo resultante é boolean
                    2. Se tipo for bitwise, categoria do tipo deverá ser integer
                        a. Aplicar sq_getResultantType em operandos
                    3. Se tipo for aritmético, operandos poderão ser type_integer or type_real
                        a. Aplicar sq_getResultantType
            - (+) implementar sq_getBinaryExpressionType:
                    1. aplicar sq_getOperatorCategory (definida em compiler_types.h) em operator 
                    2. aplicar categoria resultante na função auxiliar criada
* OK (+) Gerar Expression corretamente a partir de [unary_pre_expr] :
    *OK(+) Em 'type_checker' criar função que retorna o tipo de expressão unária
            de acordo com o operador e expressão recebida
            OBS.: assinatura da função:
                type sq_getUnaryExpressionType(const char * operator
                        , Expression * expr):
            -OK (+) Em 'type_checker' criar função auxiliar que retorna o tipo resultante
                    da expressão de acordo com categoria do operador e expressão recebida
                    1. Se categoria for lógica, tipo resultante é boolean
                    2. Se tipo for bitwise, categoria do tipo e tipo resultante deverá ser integer
                    3. Se tipo for aritmético, operandos poderão ser type_integer or type_real
                        a. tipo resultante será o mesmo
            - OK(+) implementar sq_getUnaryExpressionType:
                    1. aplicar sq_getOperatorCategory (definida em compiler_types.h) em operator 
                    2. aplicar categoria resultante na função auxiliar criada
                    
                    
                    
                    
* (++++) Gerar chamada de construtor de struct (regra struct_constructor)
    - (+) Modificar regra member_init_list para retornar uma lista com pares nome e valor
       Obs.: isso pode exigir criar um novo tipo em compiler_types (ver se há necessidade)
    - (++++) Criar função sq_genStructConstructor:
        - obter descritor da struct da tabela de símbolos
        - gerar um valor no construtor para cada FieldValue 
           na lista de fields (de StructTypeRow):
           - se o nome deste field estiver na lista de member_init_list, obter
              valor de lá
           - se não, inserir valor default (ver tarefa abaixo)
    - (+++) Criar função sq_genDefaultValue(SquirrelContext * ctx, const char * typename, TypeCategory category):
        Obs.: esta função deve receber um typename (pelo menos) e gerar um valor
          default de acordo com este tipo
        - para valores primitivos, gerar valor padrão.
           Ex.: numéricos, o valor será 0; boolean o valor será false
        - para tipos struct, gerar chamada do construtor, 
             chamando método sq_genStructConstructor e passando uma lista de 
             member_init_list vazia
        - ...
    

## Geração de programa
- Integrar com ferramenta de Build(WAF) para compilar código gerado